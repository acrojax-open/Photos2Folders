Imports System.IO

Public Class SorterControl
    Private PhotoRepositoryFolder As PhotoFolder
    Private PhotoRepositoryFiles As XFileSet

    Private WithEvents SourceFiles As XFileSet
    Private WithEvents SourcePhotoFiles As XPhotoSet
    Private WithEvents Grouper As XFileGrouper

    Private WithEvents DestinationFiles As XFileSet

    Private WithEvents DuplicateFiles As XFileSet
    Private WithEvents P2FBuilder As FolderBuilder

    Private NextStack As Stack(Of XPhotoSetClassification)
    Private PreviousStack As Stack(Of XPhotoSetClassification)
    Private CurrentFSC As XPhotoSetClassification
    Private AppOptions As ApplicationOptions
    Private LevelGroups As XLevelGroup()
    Private LevelLabels As Label()

    Private Const MAX_LEVELS As Integer = 4

    Private _SourcePath As String
    Public Property SourcePath() As String
        Get
            Return _SourcePath
        End Get
        Set(ByVal value As String)
            _SourcePath = value.Trim("\")
        End Set
    End Property

    Private _DestinationPath As String
    Public Property DestinationPath() As String
        Get
            Return _DestinationPath
        End Get
        Set(ByVal value As String)
            _DestinationPath = value.Trim("\")
        End Set
    End Property

#Region "Events Generated By this Class"
    Public Event ProgressFileSet(lngCount As Long, lngTotal As Long)
    Public Event ProgressFile(lngCount As Long, lngTotal As Long)
    Public Event ProgressMessage(strMessage As String)
#End Region

    Public Sub New()
        AppOptions = ApplicationOptions.Instance()
        InitializeLevelGroups()
    End Sub

    Public Sub LevelRefreshLayout(intLevel As Integer)
        LevelGroups(intLevel).RefreshLayout()
    End Sub

    Private Sub InitializeLevelGroups()
        Dim i As Integer

        i = 1
        LevelGroups = New XLevelGroup(MAX_LEVELS + 1) {}
        LevelLabels = New Label(MAX_LEVELS + 1) {}

        ' Intialize the current working level objects
        While i <= MAX_LEVELS
            LevelGroups(i) = New XLevelGroup()
            LevelGroups(i).LevelNumber = i
            LevelLabels(i) = Nothing
            i += 1
        End While

    End Sub

    Public Function getFileGrouper() As XFileGrouper
        Return Grouper
    End Function

    Public Function getSourceCount() As Integer
        Return SourceFiles.Count
    End Function

    Public Function getDestinationCount() As Integer
        Return DestinationFiles.Count
    End Function

    Public Function getDuplicateCount() As Integer
        Return DuplicateFiles.Count
    End Function

    Public Function getGroupCount() As Integer
        Return CurrentFSC.getPhotoCount
    End Function

    Public Function getGroupDate() As Date
        Return CurrentFSC.AssignedDate
    End Function

    Public Function getGroupNumber() As Integer
        Return PreviousStack.Count + 1
    End Function

    Public Function getGroupTotal() As Integer
        Dim intTotal As Integer
        intTotal = PreviousStack.Count + NextStack.Count
        If CurrentFSC IsNot Nothing Then
            intTotal += 1
        End If
        Return intTotal
    End Function

    Public Sub setGroupLevelLabel(intLevelNum As Integer, lblSet As Label)
        LevelLabels(intLevelNum) = lblSet
    End Sub

    Public Sub setLevelGroupContainer(intLevelNum As Integer, cContainer As Control)
        LevelGroups(intLevelNum).linkParentContainer(cContainer)
    End Sub

    Public Sub setLevelGroupSelectedLabel(intLevelNum As Integer, lblSet As Label)
        LevelGroups(intLevelNum).linkSelectedLevelLabel(lblSet)
    End Sub

    Private Sub ScanSourceFolder()
        If Directory.Exists(SourcePath) Then
            SourceFiles = New XFileSet()
            SourceFiles.HashIndexOff()
            SourceFiles.SetFileTypesImages()
            If AppOptions.getOptionBoolean(ApplicationOptions.OPT_IGNORE_DOT_FILES) Then
                SourceFiles.SkipDotFilesOn()
            End If
            SourceFiles.RootDir = SourcePath
            SourceFiles.Scan()
            If SourceFiles.Count = 0 Then
                Throw New PFException("No photo files were found in the source folder specified.", "NO_SOURCE_PHOTOS", PFException.eType.UserInputError)
            End If
        Else
            Throw New PFException("The folder specified as source folder does not exist.", "SOURCE_NOT_EXIST", PFException.eType.InternalError)
        End If
    End Sub

    Public Function getFirstEmptyLevel() As Integer
        Dim intRet As Integer
        Dim i As Integer

        intRet = -1
        i = 1
        While i <= MAX_LEVELS
            If LevelGroups(i).SelectedLevel = "" Then
                intRet = i
                i = MAX_LEVELS
            End If
            i += 1
        End While

        Return intRet
    End Function

    Public Function LevelTypesToExampleFolderPath(strLevel1 As String, strLevel2 As String, strLevel3 As String, strLevel4 As String) As String
        Dim strFullPath As String
        Dim strFolderName As String
        Dim dteUseDate As DateTime
        Dim strEventName As String

        dteUseDate = DateTime.Now
        strEventName = "Party"
        'MsgBox(strLevel1 & " " & strLevel2 & " " & strLevel3 & " " & strLevel4)
        strFullPath = LevelFolderName(strLevel1, dteUseDate, strEventName)

        If strFullPath <> "" Then
            strFolderName = LevelFolderName(strLevel2, dteUseDate, strEventName)

            If strFolderName <> "" Then
                strFullPath = strFullPath & "\" & strFolderName
                strFolderName = LevelFolderName(strLevel3, dteUseDate, strEventName)

                If strFolderName <> "" Then
                    strFullPath = strFullPath & "\" & strFolderName
                    strFolderName = LevelFolderName(strLevel4, dteUseDate, strEventName)

                    If strFolderName <> "" Then
                        strFullPath = strFullPath & "\" & strFolderName
                    End If
                End If
            End If
        End If

        Return strFullPath
    End Function

    Public Function LevelFolderName(strLevelType As String, dteUseDate As DateTime, strEvent As String)
        Dim strReturnName As String
        Select Case strLevelType
            Case ApplicationOptions.FOLDER_LEVEL_YEAR
                strReturnName = dteUseDate.ToString("yyyy")
            Case ApplicationOptions.FOLDER_LEVEL_MONTH
                strReturnName = dteUseDate.ToString("MM-MMMM")
            Case ApplicationOptions.FOLDER_LEVEL_DAY
                strReturnName = "Day-" & dteUseDate.ToString("dd")
            Case ApplicationOptions.FOLDER_LEVEL_EVENT
                strReturnName = strEvent
            Case ApplicationOptions.FOLDER_LEVEL_NONE
                strReturnName = ""
            Case ""
                strReturnName = ""
            Case Else
                Throw New PFException("Invalid level type specified", "INVALID_LEVEL_TYPE", PFException.eType.InternalError)
        End Select
        Return strReturnName
    End Function

    Private Sub GroupSourceFiles()
        Grouper = New XFileGrouper()
        SourcePhotoFiles = New XPhotoSet()

        SourcePhotoFiles.loadFileSet(SourceFiles)

        Grouper.setSourcePhotoSet(SourcePhotoFiles)
        Grouper.Process()
    End Sub

    Private Sub GrouperToStack()
        NextStack = New Stack(Of XPhotoSetClassification)()
        PreviousStack = New Stack(Of XPhotoSetClassification)()

        For Each fscGroup As XPhotoSetClassification In Grouper
            NextStack.Push(fscGroup)
        Next
    End Sub

    Public Sub Run()
        CheckRequirements()
        ScanAndGroupSource()
        ScanDestination()
        FindDuplicates()
        DatesToLevels()
        SetupLevelGroups()
    End Sub

    ' Convert all dates from the photo set classifications to separate levels
    Private Sub DatesToLevels()
        For Each pscWorking As XPhotoSetClassification In Grouper
            pscWorking.dateToLevels()
        Next
    End Sub

    ' Intializes the level groups used by the UI. Fills in the default values
    ' as needed as well as any custom tags previously used
    Private Sub SetupLevelGroups()
        Dim intLevel As Integer
        Dim strOptionName As String
        Dim strLevelOption As String

        intLevel = 1

        While intLevel <= MAX_LEVELS
            LevelGroups(intLevel).Clear()

            strOptionName = AppOptions.getLevelOptionName(intLevel)
            strLevelOption = AppOptions.getOption(strOptionName)
            Select Case strLevelOption
                Case ApplicationOptions.FOLDER_LEVEL_MONTH
                    LevelGroups(intLevel).fillMonths()
                    LevelGroups(intLevel).SortMethod = XLevelGroup.SORT_ASCENDING
                Case ApplicationOptions.FOLDER_LEVEL_YEAR
                    LevelGroups(intLevel).fillYears()
                    LevelGroups(intLevel).SortMethod = XLevelGroup.SORT_DESCENDING
                Case ApplicationOptions.FOLDER_LEVEL_NONE
                    ' Not used
                Case ApplicationOptions.FOLDER_LEVEL_EVENT

                    LevelGroups(intLevel).SortMethod = XLevelGroup.SORT_NONE
                Case ApplicationOptions.FOLDER_LEVEL_DAY
                    LevelGroups(intLevel).fillDays()
            End Select
            LoadLevelList(intLevel)
            intLevel += 1
        End While

    End Sub

    Public Sub LoadLevelList(intLevel As Integer)
        Dim lstMRU As List(Of String)
        Dim strListName As String

        strListName = "LVL" & intLevel & "_" & AppOptions.getOption(AppOptions.getLevelOptionName(intLevel))

        lstMRU = AppOptions.getList(strListName)
        LevelGroups(intLevel).fillList(lstMRU)
        LevelRefreshLayout(intLevel)
    End Sub

    Public Sub AddLevelEntry(intLevel As Integer, strEntry As String)
        Dim strOption As String

        strOption = AppOptions.getOption(AppOptions.getLevelOptionName(intLevel))

        If strEntry <> "" Then
            LevelGroups(intLevel).SelectedLevel = strEntry
            Select Case strOption
                Case ApplicationOptions.FOLDER_LEVEL_YEAR
                Case ApplicationOptions.FOLDER_LEVEL_MONTH
                Case ApplicationOptions.FOLDER_LEVEL_DAY
                Case ApplicationOptions.FOLDER_LEVEL_EVENT
                    LevelGroups(intLevel).Empty()
                Case ApplicationOptions.FOLDER_LEVEL_NONE
                Case ""
                Case Else
                    Throw New PFException("Invalid level type specified", "INVALID_LEVEL_TYPE", PFException.eType.InternalError)
            End Select
            AppOptions.addMRUListEntry("LVL" & intLevel & "_" & strOption, strEntry, 20)
            LoadLevelList(intLevel)
        Else
            MsgBox("Please enter the name of the folder you'd like to add", MsgBoxStyle.OkOnly, "Enter folder name")
        End If
    End Sub

    Private Sub CheckRequirements()
        If SourcePath = "" Then
            Throw New PFException("Please specify the folder which contains the photos you want to organize", "SOURCE_EMPTY", PFException.eType.UserInputError)
        ElseIf DestinationPath = "" Then
            Throw New PFException("Please enter the folder where you want your organized photos to be placed. You can choose a folder which already has organized images if you want to add to it.", "DEST_EMPTY", PFException.eType.UserInputError)
        ElseIf Not Directory.Exists(SourcePath) Then
            Throw New PFException("The folder specified as source folder does not exist.", "SOURCE_NOT_EXIST", PFException.eType.UserInputError)
        ElseIf Not Directory.Exists(DestinationPath) Then
            Throw New PFException("The folder specified as destination folder does not exist.", "DEST_NOT_EXIST", PFException.eType.UserInputError)
        ElseIf SourcePath.ToLower = DestinationPath.ToLower Then
            Throw New PFException("You must select a different folder to put your organized photos.  It can not be the same as the folder containing your un-organized photos.", "SOURCE_DEST_SAME", PFException.eType.UserInputError)
        ElseIf DestinationPath.Length < SourcePath.Length AndAlso DestinationPath.ToLower & "\" = SourcePath.Substring(0, DestinationPath.Length + 1).ToLower Then
            Throw New PFException("The location of your source photos can not be a subfolder of the location of your organized folders", "NESTED_SOURCE_DEST", PFException.eType.UserInputError)
        ElseIf SourcePath.Length < DestinationPath.Length AndAlso SourcePath.ToLower & "\" = DestinationPath.Substring(0, SourcePath.Length + 1).ToLower Then
            Throw New PFException("The location of your organized folders can not be a subfolder of your photo source", "NESTED_SOURCE_DEST", PFException.eType.UserInputError)
        End If
    End Sub

    Private Sub ScanAndGroupSource()
        ScanSourceFolder()
        GroupSourceFiles()
        GrouperToStack()
    End Sub

    Public Sub ScanDestination()
        If Directory.Exists(DestinationPath) Then
            DestinationFiles = New XFileSet()
            DestinationFiles.HashIndexOff()
            DestinationFiles.SetFileTypesImages()
            DestinationFiles.RootDir = DestinationPath
            DestinationFiles.Scan()
        Else
            Throw New PFException("The folder specified as destination folder does not exist.", "DEST_NOT_EXIST", PFException.eType.InternalError)
        End If
    End Sub

    Public Sub CopyPhotosToFolders()
        Try
            SaveSelectedLevelFolders()
            frmMain.Hide()
            frmProgressBox.Show()
            P2FBuilder = New FolderBuilder()
            P2FBuilder.setClassifications(MainSorter.getFileGrouper)
            P2FBuilder.Start()
            frmProgressBox.Close()
            frmFinished.Show()
        Catch ex As Exception
            frmMain.Show()
            frmProgressBox.Close()
            Throw ex
        End Try
    End Sub

    Private Sub FindDuplicates()
        Dim intCurrent As Integer
        Dim intTotal As Integer

        intTotal = SourceFiles.Count
        intCurrent = 1

        RaiseEvent ProgressMessage("Checking for duplicate photos...")

        DuplicateFiles = New XFileSet
        For Each fiSource As XFileInfo In SourceFiles
            If DestinationFiles.CheckForDuplicate(fiSource) Then
                DuplicateFiles.AddFileInfo(fiSource)
                fiSource.DuplicateFlag = True
            Else
                fiSource.DuplicateFlag = False
            End If
            RaiseEvent ProgressFileSet(intCurrent, intTotal)
            intCurrent += 1
        Next
    End Sub

    Public Function NextGroup() As Boolean
        Dim blnReturn As Boolean

        blnReturn = False

        If NextStack Is Nothing Then
            Throw New PFException("Call to NextGroup prior to scanning/grouping files", "CALL_OUT_OF_ORDER", PFException.eType.InternalError)
        End If

        SaveSelectedLevelFolders()

        If CurrentFSC IsNot Nothing AndAlso CurrentFSC.isMissingLevel() Then
            MsgBox("Please specify a value for all folders before moving to the next group", vbOKOnly, "Missing Folder Name")
        Else
            If NextStack.Count > 0 Then
                If CurrentFSC IsNot Nothing Then
                    PreviousStack.Push(CurrentFSC)
                End If
                CurrentFSC = NextStack.Pop()
                SetCurrentGroupLevels()
                blnReturn = True
            End If
        End If

        RefreshAllGroupSelections()

        Return blnReturn
    End Function

    Private Sub RefreshAllGroupSelections()
        For Each xGroup As XLevelGroup In LevelGroups
            If xGroup IsNot Nothing Then
                xGroup.MarkSelected()
            End If
        Next
    End Sub

    Public Function isCurrentGroupComplete() As Boolean
        Dim blnRet As Boolean
        If CurrentFSC IsNot Nothing AndAlso CurrentFSC.isMissingLevel Then
            blnRet = False
        Else
            blnRet = True
        End If
        Return blnRet
    End Function

    Public Function isLastGroup() As Boolean
        Dim blnRet As Boolean

        If NextStack.Count > 0 Then
            blnRet = False
        Else
            blnRet = True
        End If

        Return blnRet
    End Function

    Public Sub SaveSelectedLevelFolders()
        Dim i As Integer
        If CurrentFSC IsNot Nothing Then
            i = 1
            While i <= MAX_LEVELS
                CurrentFSC.setAssignedLevel(i, LevelGroups(i).SelectedLevel)
                i += 1
            End While
        End If
    End Sub

    Private Sub SetCurrentGroupLevels()
        Dim i As Integer

        If CurrentFSC.hasAssignedLevels = False Then
            CurrentFSC.dateToLevels()
        End If

        i = 1

        While i <= 4
            LevelGroups(i).SelectedLevel = CurrentFSC.getAssignedLevel(i)
            i += 1
        End While


    End Sub

    Public Function PrevGroup() As Boolean
        Dim blnReturn As Boolean

        If NextStack Is Nothing Then
            Throw New PFException("Call to PrevGroup prior to scanning/grouping files", "CALL_OUT_OF_ORDER", PFException.eType.InternalError)
        End If

        SaveSelectedLevelFolders()

        If PreviousStack.Count > 0 Then
            NextStack.Push(CurrentFSC)
            CurrentFSC = PreviousStack.Pop()
            SetCurrentGroupLevels()
            blnReturn = True
        Else
            blnReturn = False
        End If

        Return blnReturn
    End Function

    Public Function Current() As XPhotoSetClassification
        If CurrentFSC Is Nothing Then
            Throw New PFException("Call to Current prior to NextGroup", "CALL_OUT_OF_ORDER", PFException.eType.InternalError)
        End If
        Return CurrentFSC
    End Function

#Region "Event Handlers"


    Private Sub SourceFiles_FileHashProgress(lngPosition As Long, lngFileSize As Long) Handles SourceFiles.FileHashProgress
        RaiseEvent ProgressFile(lngPosition, lngFileSize)
    End Sub

    Private Sub SourceFiles_ScanError(strPath As String, strMessage As String, ByRef bAbort As Boolean) Handles SourceFiles.ScanError

    End Sub

    Private Sub SourceFiles_ScanProgress(strPath As String, ScanNumber As Long) Handles SourceFiles.ScanProgress
        RaiseEvent ProgressMessage("Found " & ScanNumber & " files...")
    End Sub

    Private Sub SourceFiles_SetHashProgress(strFileName As String, lngFileNumber As Long, lngFileCount As Long) Handles SourceFiles.SetHashProgress
        RaiseEvent ProgressMessage("Analyzing file '" & strFileName & "'...")
        RaiseEvent ProgressFileSet(lngFileNumber, lngFileCount)
    End Sub

    Private Sub Grouper_GroupingProgress(strFile As String, lngCurrent As Long, lngTotal As Long) Handles Grouper.GroupingProgress
        If lngTotal = 0 Then
            RaiseEvent ProgressMessage("Waiting...")
            RaiseEvent ProgressFileSet(0, 100)
        Else
            RaiseEvent ProgressMessage("Grouping file '" & strFile & "'...")
            RaiseEvent ProgressFileSet(lngCurrent, lngTotal)
        End If
    End Sub

    Private Sub P2FBuilder_FileSetProgress(lngItem As Long, lngTotal As Long) Handles P2FBuilder.FileSetProgress
        Dim strAction As String

        If AppOptions.getOptionBoolean(ApplicationOptions.OPT_MOVE_FILES) Then
            strAction = "Moving"
        Else
            strAction = "Copying"
        End If

        RaiseEvent ProgressMessage(strAction & " photos to new folders (" & lngItem & " of " & lngTotal & ")")
        RaiseEvent ProgressFileSet(lngItem, lngTotal)
    End Sub


    Private Sub P2FBuilder_ProgressMessage(strMessage As String) Handles P2FBuilder.ProgressMessage

    End Sub

#End Region


    Private Sub DestinationFiles_ScanProgress(strPath As String, ScanNumber As Long) Handles DestinationFiles.ScanProgress
        RaiseEvent ProgressMessage("Scanning destination path '" & strPath & "'")
    End Sub
End Class
